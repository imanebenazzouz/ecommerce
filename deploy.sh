#!/bin/bash
set -e

echo "üöÄ D√©ploiement de l'application ecommerce en production..."

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier si Docker est install√©
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# V√©rifier si Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# V√©rifier si le fichier .env.production existe
if [ ! -f ".env.production" ]; then
    log_error "Le fichier .env.production n'existe pas. Veuillez le cr√©er d'abord."
    exit 1
fi

log_info "Configuration de l'environnement de production..."

# Copier le fichier d'environnement
cp .env.production .env

# Cr√©er les r√©pertoires n√©cessaires
log_info "Cr√©ation des r√©pertoires n√©cessaires..."
mkdir -p ssl logs monitoring

# Arr√™ter les conteneurs existants
log_info "Arr√™t des conteneurs existants..."
docker-compose -f docker-compose.prod.yml down --remove-orphans || true

# Nettoyer les images inutilis√©es
log_info "Nettoyage des images Docker..."
docker system prune -f

# Construire les images
log_info "Construction des images Docker..."
docker-compose -f docker-compose.prod.yml build --no-cache

# D√©marrer les services
log_info "D√©marrage des services..."
docker-compose -f docker-compose.prod.yml up -d

# Attendre que les services soient pr√™ts
log_info "Attente du d√©marrage des services..."
sleep 30

# V√©rifier le statut des services
log_info "V√©rification du statut des services..."
docker-compose -f docker-compose.prod.yml ps

# Tester la connectivit√©
log_info "Test de la connectivit√©..."

# Attendre que l'API soit pr√™te
for i in {1..30}; do
    if curl -f http://localhost/health > /dev/null 2>&1; then
        log_success "API accessible!"
        break
    fi
    log_info "Attente de l'API... ($i/30)"
    sleep 2
done

# Afficher les logs des services
log_info "Logs des services:"
docker-compose -f docker-compose.prod.yml logs --tail=20

# Afficher les informations de connexion
log_success "D√©ploiement termin√©!"
echo ""
echo "üåê Application accessible sur:"
echo "   - Frontend: http://localhost"
echo "   - API: http://localhost/api"
echo "   - Health Check: http://localhost/health"
echo ""
echo "üìä Monitoring:"
echo "   - Prometheus: http://localhost:9090"
echo "   - Grafana: http://localhost:3001 (admin/admin_secure_password_2024)"
echo ""
echo "üîß Commandes utiles:"
echo "   - Voir les logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   - Arr√™ter: docker-compose -f docker-compose.prod.yml down"
echo "   - Red√©marrer: docker-compose -f docker-compose.prod.yml restart"
echo "   - Mise √† jour: ./deploy.sh"
echo ""

# V√©rifier l'√©tat final
if curl -f http://localhost/health > /dev/null 2>&1; then
    log_success "Application d√©ploy√©e avec succ√®s!"
    exit 0
else
    log_error "L'application n'est pas accessible. V√©rifiez les logs."
    exit 1
fi
