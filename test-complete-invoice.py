#!/usr/bin/env python3
"""
Script de test complet pour cr√©er une commande et tester le t√©l√©chargement de facture PDF
"""

import requests
import json
import time
import sys
import os

# Configuration
API_BASE = "http://127.0.0.1:8000"

def create_complete_order_flow():
    """Cr√©e une commande compl√®te avec paiement pour tester la facture"""
    
    print("üõí Cr√©ation d'une commande compl√®te pour test facture")
    print("=" * 60)
    
    # 1. Connexion client
    print("\n1Ô∏è‚É£ Connexion client...")
    client_login = {
        "email": "client@example.com", 
        "password": "secret"
    }
    
    response = requests.post(f"{API_BASE}/auth/login", json=client_login)
    if response.status_code != 200:
        print(f"‚ùå Erreur connexion client: {response.status_code}")
        return False
    
    client_token = response.json()["token"]
    client_headers = {"Authorization": f"Bearer {client_token}"}
    print("‚úÖ Client connect√©")
    
    # 2. R√©cup√©rer les produits disponibles
    print("\n2Ô∏è‚É£ R√©cup√©ration des produits...")
    response = requests.get(f"{API_BASE}/products")
    if response.status_code != 200:
        print(f"‚ùå Erreur r√©cup√©ration produits: {response.status_code}")
        return False
    
    products = response.json()
    if not products:
        print("‚ùå Aucun produit disponible")
        return False
    
    print(f"‚úÖ {len(products)} produits trouv√©s")
    for p in products:
        print(f"   - {p['name']}: {p['price_cents']/100:.2f}‚Ç¨ (stock: {p['stock_qty']})")
    
    # 3. Ajouter des produits au panier
    print("\n3Ô∏è‚É£ Ajout au panier...")
    cart_products = products[:2]  # Prendre les 2 premiers produits
    
    for product in cart_products:
        cart_data = {
            "product_id": product["id"],
            "qty": 2  # 2 exemplaires de chaque
        }
        response = requests.post(f"{API_BASE}/cart/add", json=cart_data, headers=client_headers)
        if response.status_code != 200:
            print(f"‚ùå Erreur ajout au panier {product['name']}: {response.status_code}")
            return False
        print(f"‚úÖ {product['name']} ajout√© au panier (quantit√©: 2)")
    
    # 4. V√©rifier le panier
    print("\n4Ô∏è‚É£ V√©rification du panier...")
    response = requests.get(f"{API_BASE}/cart", headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur r√©cup√©ration panier: {response.status_code}")
        return False
    
    cart = response.json()
    print(f"‚úÖ Panier avec {len(cart['items'])} articles")
    
    # 5. Checkout (cr√©er la commande)
    print("\n5Ô∏è‚É£ Cr√©ation de la commande...")
    response = requests.post(f"{API_BASE}/orders/checkout", headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur checkout: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        return False
    
    order_data = response.json()
    order_id = order_data["order_id"]
    total_cents = order_data["total_cents"]
    print(f"‚úÖ Commande cr√©√©e: {order_id[:8]} - Total: {total_cents/100:.2f}‚Ç¨")
    
    # 6. Paiement de la commande
    print("\n6Ô∏è‚É£ Paiement de la commande...")
    payment_data = {
        "card_number": "1234567890123456",  # Carte valide (ne finit pas par 0000)
        "exp_month": 12,
        "exp_year": 2025,
        "cvc": "123"
    }
    
    response = requests.post(f"{API_BASE}/orders/{order_id}/pay", json=payment_data, headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur paiement: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        return False
    
    payment_result = response.json()
    print(f"‚úÖ Paiement effectu√©: {payment_result.get('payment_id', 'N/A')}")
    
    # 7. Validation admin de la commande
    print("\n7Ô∏è‚É£ Validation admin...")
    admin_login = {
        "email": "admin@example.com",
        "password": "admin"
    }
    
    response = requests.post(f"{API_BASE}/auth/login", json=admin_login)
    if response.status_code != 200:
        print(f"‚ùå Erreur connexion admin: {response.status_code}")
        return False
    
    admin_token = response.json()["token"]
    admin_headers = {"Authorization": f"Bearer {admin_token}"}
    
    # Valider la commande
    response = requests.post(f"{API_BASE}/admin/orders/{order_id}/validate", headers=admin_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur validation: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        return False
    
    print("‚úÖ Commande valid√©e par l'admin")
    
    # 8. Exp√©dition de la commande
    print("\n8Ô∏è‚É£ Exp√©dition de la commande...")
    response = requests.post(f"{API_BASE}/admin/orders/{order_id}/ship", headers=admin_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur exp√©dition: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        return False
    
    print("‚úÖ Commande exp√©di√©e")
    
    # 9. Test du t√©l√©chargement de facture
    print("\n9Ô∏è‚É£ Test du t√©l√©chargement de facture PDF...")
    
    # V√©rifier que la facture existe
    response = requests.get(f"{API_BASE}/orders/{order_id}/invoice", headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Facture non trouv√©e: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        return False
    
    invoice_data = response.json()
    print("‚úÖ Facture trouv√©e")
    print(f"   - ID: {invoice_data['id'][:8]}")
    print(f"   - Nombre d'articles: {len(invoice_data['lines'])}")
    print(f"   - Total: {invoice_data['total_cents'] / 100:.2f} ‚Ç¨")
    
    # V√©rifier le contenu de la facture
    print("\nüîç Validation du contenu de la facture...")
    
    # V√©rifier chaque ligne
    total_calculated = 0
    for line in invoice_data['lines']:
        expected_total = line['unit_price_cents'] * line['quantity']
        if line.get('line_total_cents', 0) != expected_total:
            print(f"‚ùå Erreur calcul ligne {line['product_id']}: {line.get('line_total_cents', 0)} ‚â† {expected_total}")
            return False
        total_calculated += expected_total
        print(f"   ‚úÖ {line['name']}: {line['quantity']} √ó {line['unit_price_cents']/100:.2f}‚Ç¨ = {expected_total/100:.2f}‚Ç¨")
    
    if total_calculated != invoice_data['total_cents']:
        print(f"‚ùå Total incoh√©rent: {total_calculated/100:.2f}‚Ç¨ ‚â† {invoice_data['total_cents']/100:.2f}‚Ç¨")
        return False
    
    print(f"‚úÖ Total coh√©rent: {total_calculated/100:.2f}‚Ç¨")
    
    # T√©l√©charger le PDF
    print("\nüìÑ T√©l√©chargement du PDF...")
    response = requests.get(f"{API_BASE}/orders/{order_id}/invoice/download", headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur t√©l√©chargement PDF: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        return False
    
    # V√©rifier le type de contenu
    content_type = response.headers.get('content-type')
    if content_type != 'application/pdf':
        print(f"‚ùå Type de contenu incorrect: {content_type}")
        return False
    
    # Sauvegarder le PDF
    filename = f"test_facture_{order_id[:8]}.pdf"
    with open(filename, 'wb') as f:
        f.write(response.content)
    
    file_size = len(response.content)
    print(f"‚úÖ PDF t√©l√©charg√©: {filename} ({file_size} bytes)")
    
    # 10. V√©rification des donn√©es de paiement et livraison
    print("\nüîç V√©rification des donn√©es associ√©es...")
    
    # R√©cup√©rer la commande mise √† jour
    response = requests.get(f"{API_BASE}/orders/{order_id}", headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur r√©cup√©ration commande: {response.status_code}")
        return False
    
    updated_order = response.json()
    
    # V√©rifier le statut de paiement
    if updated_order['status'] != 'PAYEE':
        print(f"‚ùå Statut de paiement incorrect: {updated_order['status']}")
        return False
    print("‚úÖ Commande correctement pay√©e")
    
    # V√©rifier les donn√©es de livraison
    if updated_order.get('delivery'):
        delivery = updated_order['delivery']
        print(f"‚úÖ Transporteur: {delivery['transporteur']}")
        print(f"‚úÖ Statut livraison: {delivery['delivery_status']}")
        if delivery.get('tracking_number'):
            print(f"‚úÖ Num√©ro de suivi: {delivery['tracking_number']}")
    else:
        print("‚ö†Ô∏è Aucune information de livraison")
    
    # 11. Validation finale
    print("\nüéØ Validation finale...")
    
    # V√©rifier que le PDF s'ouvre correctement (v√©rification basique)
    if file_size < 1000:  # PDF trop petit
        print(f"‚ùå PDF suspect (trop petit: {file_size} bytes)")
        return False
    
    print("‚úÖ PDF semble valide")
    
    # Nettoyer le fichier de test
    os.remove(filename)
    print(f"‚úÖ Fichier de test supprim√©: {filename}")
    
    print("\nüéâ TEST COMPLET R√âUSSI !")
    print("=" * 60)
    print("‚úÖ Commande cr√©√©e et pay√©e")
    print("‚úÖ Facture g√©n√©r√©e automatiquement")
    print("‚úÖ T√©l√©chargement de facture PDF fonctionnel")
    print("‚úÖ Contenu de la facture correct")
    print("‚úÖ Donn√©es de paiement coh√©rentes")
    print("‚úÖ Donn√©es de livraison pr√©sentes")
    print("‚úÖ Coh√©rence entre toutes les donn√©es")
    
    return order_id

if __name__ == "__main__":
    try:
        order_id = create_complete_order_flow()
        if order_id:
            print(f"\nüìã ID de la commande de test: {order_id}")
            sys.exit(0)
        else:
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
