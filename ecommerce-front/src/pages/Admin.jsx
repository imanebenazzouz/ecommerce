// src/pages/Admin.jsx
import React, { useEffect, useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import { api } from "../lib/api";

export default function Admin() {
  const navigate = useNavigate();

  // S√©curit√© front rapide (on cache la page si pas admin)
  const role = (typeof localStorage !== "undefined" && localStorage.getItem("role")) || "user";
  useEffect(() => {
    if (role !== "admin") navigate("/", { replace: true });
  }, [role, navigate]);

  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");
  const [msg, setMsg] = useState("");

  // √âtat pour les commandes clients
  const [orders, setOrders] = useState([]);
  const [ordersLoading, setOrdersLoading] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState("");
  const [showOrders, setShowOrders] = useState(false);

  // Formulaire de cr√©ation
  const [form, setForm] = useState({
    name: "",
    description: "",
    price_eur: "", // on saisit en euros c√¥t√© UI, on convertit en cents pour l‚ÄôAPI
    stock_qty: "",
    active: true,
  });

  const fmt = useMemo(() => new Intl.NumberFormat("fr-FR", { style: "currency", currency: "EUR" }), []);

  function eurToCents(v) {
    if (v === "" || v === null || v === undefined) return 0;
    const n = Number(String(v).replace(",", "."));
    return Number.isFinite(n) ? Math.round(n * 100) : 0;
  }

  function centsToEur(c) {
    if (c === null || c === undefined) return "";
    return (c / 100).toFixed(2);
  }

  async function load() {
    setLoading(true);
    setErr("");
    try {
      const data = await api.adminListProducts();
      setItems(data);
    } catch (e) {
      setErr(e.message || "Impossible de charger les produits.");
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); }, []);

  // Fonction pour charger les commandes
  async function loadOrders(userId = null) {
    setOrdersLoading(true);
    setErr("");
    try {
      const params = userId ? { user_id: userId } : {};
      const data = await api.adminListOrders(params);
      setOrders(data);
    } catch (e) {
      setErr(e.message || "Impossible de charger les commandes.");
    } finally {
      setOrdersLoading(false);
    }
  }

  // Fonction pour afficher les commandes d'un client sp√©cifique
  async function handleViewClientOrders() {
    if (!selectedUserId.trim()) {
      setErr("Veuillez saisir un ID utilisateur.");
      return;
    }
    setShowOrders(true);
    await loadOrders(selectedUserId);
  }

  // Fonction pour afficher toutes les commandes
  async function handleViewAllOrders() {
    setShowOrders(true);
    setSelectedUserId("");
    await loadOrders();
  }

  async function handleCreate(e) {
    e.preventDefault();
    setErr(""); setMsg("");
    try {
      const body = {
        name: form.name.trim(),
        description: form.description.trim(),
        price_cents: eurToCents(form.price_eur),
        stock_qty: Number(form.stock_qty || 0),
        active: !!form.active,
      };
      if (!body.name) throw new Error("Nom obligatoire");
      const created = await api.adminCreateProduct(body);
      setMsg(`‚úÖ Produit cr√©√© : ${created.name}`);
      setForm({ name: "", description: "", price_eur: "", stock_qty: "", active: true });
      await load();
    } catch (e) {
      setErr(e.message || "Erreur lors de la cr√©ation.");
    }
  }

  async function handleUpdate(id, patch) {
    setErr(""); setMsg("");
    try {
      // On convertit si besoin
      const b = { ...patch };
      if (Object.prototype.hasOwnProperty.call(b, "price_eur")) {
        b.price_cents = eurToCents(b.price_eur);
        delete b.price_eur;
      }
      if (Object.prototype.hasOwnProperty.call(b, "stock_qty")) {
        b.stock_qty = Number(b.stock_qty);
      }
      const updated = await api.adminUpdateProduct(id, b);
      setMsg(`‚úÖ Modifi√© : ${updated.name}`);
      await load();
    } catch (e) {
      setErr(e.message || "Erreur de mise √† jour.");
    }
  }

  async function handleDelete(id) {
    if (!confirm("Supprimer ce produit ?")) return;
    setErr(""); setMsg("");
    try {
      await api.adminDeleteProduct(id);
      setMsg("üóëÔ∏è Produit supprim√©");
      await load();
    } catch (e) {
      setErr(e.message || "Erreur de suppression.");
    }
  }

  return (
    <div style={{ padding: 24 }}>
      <header style={{ marginBottom: 16 }}>
        <h2 style={{ margin: 0 }}>üõ†Ô∏è Espace administrateur</h2>
        <p style={{ color: "#64748b", marginTop: 6 }}>
          G√©rer le catalogue produits (cr√©er, √©diter, supprimer).
        </p>
      </header>

      {/* Alerts */}
      {msg && (
        <div style={{
          padding: "10px 12px", borderRadius: 8, marginBottom: 12,
          background: "#ecfdf5", color: "#065f46", border: "1px solid #a7f3d0", fontWeight: 600
        }}>
          {msg}
        </div>
      )}
      {err && (
        <div style={{
          padding: "10px 12px", borderRadius: 8, marginBottom: 12,
          background: "#fef2f2", color: "#991b1b", border: "1px solid #fecaca", fontWeight: 600
        }}>
          {err}
        </div>
      )}

      {/* Formulaire Cr√©ation */}
      <section style={{
        border: "1px solid #e5e7eb", borderRadius: 12, padding: 16, marginBottom: 20,
        background: "#fff", boxShadow: "0 1px 2px rgba(0,0,0,.04)"
      }}>
        <h3 style={{ marginTop: 0, marginBottom: 10 }}>Cr√©er un produit</h3>
        <form onSubmit={handleCreate} style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 12 }}>
          <label style={{ display: "block" }}>
            <div style={{ fontWeight: 600, marginBottom: 4 }}>Nom</div>
            <input
              value={form.name}
              onChange={(e) => setForm(f => ({ ...f, name: e.target.value }))}
              required
              style={fieldStyle}
              placeholder="Ex: T-Shirt Logo"
            />
          </label>

          <label style={{ display: "block" }}>
            <div style={{ fontWeight: 600, marginBottom: 4 }}>Prix (EUR)</div>
            <input
              value={form.price_eur}
              onChange={(e) => setForm(f => ({ ...f, price_eur: e.target.value }))}
              required
              inputMode="decimal"
              style={fieldStyle}
              placeholder="19.99"
            />
          </label>

          <label style={{ display: "block" }}>
            <div style={{ fontWeight: 600, marginBottom: 4 }}>Stock</div>
            <input
              value={form.stock_qty}
              onChange={(e) => setForm(f => ({ ...f, stock_qty: e.target.value }))}
              required
              inputMode="numeric"
              style={fieldStyle}
              placeholder="100"
            />
          </label>

          <label style={{ display: "block" }}>
            <div style={{ fontWeight: 600, marginBottom: 4 }}>Actif</div>
            <select
              value={form.active ? "1" : "0"}
              onChange={(e) => setForm(f => ({ ...f, active: e.target.value === "1" }))}
              style={fieldStyle}
            >
              <option value="1">Oui</option>
              <option value="0">Non</option>
            </select>
          </label>

          <label style={{ display: "block", gridColumn: "1 / -1" }}>
            <div style={{ fontWeight: 600, marginBottom: 4 }}>Description</div>
            <textarea
              value={form.description}
              onChange={(e) => setForm(f => ({ ...f, description: e.target.value }))}
              rows={3}
              style={{ ...fieldStyle, resize: "vertical" }}
              placeholder="Coton bio, coupe droite‚Ä¶"
            />
          </label>

          <div style={{ gridColumn: "1 / -1", display: "flex", gap: 8, justifyContent: "flex-end" }}>
            <button type="submit" style={primaryBtn}>Cr√©er</button>
            <button type="button" style={secondaryBtn} onClick={() => setForm({ name:"", description:"", price_eur:"", stock_qty:"", active:true })}>
              R√©initialiser
            </button>
          </div>
        </form>
      </section>

      {/* Liste produits */}
      <section>
        <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between", marginBottom: 10 }}>
          <h3 style={{ margin: 0 }}>Produits ({items.length})</h3>
          <button onClick={load} style={secondaryBtn}>Rafra√Æchir</button>
        </div>

        {loading ? (
          <p style={{ color: "#64748b" }}>Chargement‚Ä¶</p>
        ) : items.length === 0 ? (
          <div style={{
            padding: 24, textAlign: "center", border: "1px solid #e5e7eb",
            borderRadius: 12, background: "#fff"
          }}>
            Aucun produit.
          </div>
        ) : (
          <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill, minmax(280px, 1fr))", gap: 14 }}>
            {items.map(p => (
              <article key={p.id} style={{
                border: "1px solid #e5e7eb", borderRadius: 12, background: "#fff",
                boxShadow: "0 1px 2px rgba(0,0,0,.04)", overflow: "hidden"
              }}>
                <div style={{
                  padding: 12, borderBottom: "1px solid #eef2f7", background: "#f8fafc",
                  display: "flex", alignItems: "center", justifyContent: "space-between"
                }}>
                  <strong>{p.name}</strong>
                  <span style={{ fontWeight: 700, color: "#2563eb" }}>{fmt.format(p.price_cents / 100)}</span>
                </div>

                <div style={{ padding: 12, display: "grid", gap: 8 }}>
                  <div style={{ color: "#64748b", fontSize: 14 }}>{p.description || "‚Äî"}</div>

                  <div style={{ display: "flex", gap: 8, alignItems: "center", flexWrap: "wrap" }}>
                    <small>Stock:</small>
                    <input
                      defaultValue={p.stock_qty}
                      type="number"
                      min="0"
                      onBlur={(e) => {
                        const val = Number(e.target.value);
                        if (val !== p.stock_qty && Number.isFinite(val)) handleUpdate(p.id, { stock_qty: val });
                      }}
                      style={{ ...fieldStyle, width: 110, padding: "6px 8px" }}
                    />

                    <small>Actif:</small>
                    <select
                      defaultValue={p.active ? "1" : "0"}
                      onChange={(e) => handleUpdate(p.id, { active: e.target.value === "1" })}
                      style={{ ...fieldStyle, width: 100, padding: "6px 8px" }}
                    >
                      <option value="1">Oui</option>
                      <option value="0">Non</option>
                    </select>
                  </div>

                  <div style={{ display: "flex", gap: 8, alignItems: "center", flexWrap: "wrap" }}>
                    <small>Nom:</small>
                    <input
                      defaultValue={p.name}
                      onBlur={(e) => {
                        const v = e.target.value.trim();
                        if (v && v !== p.name) handleUpdate(p.id, { name: v });
                      }}
                      style={{ ...fieldStyle, flex: 1, padding: "6px 8px" }}
                    />
                  </div>

                  <div style={{ display: "flex", gap: 8, alignItems: "center", flexWrap: "wrap" }}>
                    <small>Prix (EUR):</small>
                    <input
                      defaultValue={centsToEur(p.price_cents)}
                      inputMode="decimal"
                      onBlur={(e) => {
                        const v = e.target.value;
                        if (v !== centsToEur(p.price_cents)) handleUpdate(p.id, { price_eur: v });
                      }}
                      style={{ ...fieldStyle, width: 140, padding: "6px 8px" }}
                    />
                  </div>

                  <div style={{ display: "flex", gap: 8, justifyContent: "flex-end", marginTop: 6 }}>
                    <button onClick={() => handleDelete(p.id)} style={dangerBtn}>Supprimer</button>
                  </div>
                </div>
              </article>
            ))}
          </div>
        )}
      </section>

      {/* Section Commandes Clients */}
      <section style={{
        border: "1px solid #e5e7eb", borderRadius: 12, padding: 16, marginTop: 20,
        background: "#fff", boxShadow: "0 1px 2px rgba(0,0,0,.04)"
      }}>
        <h3 style={{ marginTop: 0, marginBottom: 16 }}>üì¶ Commandes Clients</h3>
        
        <div style={{ display: "flex", gap: 12, alignItems: "center", marginBottom: 16, flexWrap: "wrap" }}>
          <input
            type="text"
            placeholder="ID utilisateur (optionnel)"
            value={selectedUserId}
            onChange={(e) => setSelectedUserId(e.target.value)}
            style={{ ...fieldStyle, width: 200, padding: "8px 12px" }}
          />
          <button 
            onClick={handleViewClientOrders}
            style={primaryBtn}
            disabled={ordersLoading}
          >
            Voir commandes client
          </button>
          <button 
            onClick={handleViewAllOrders}
            style={secondaryBtn}
            disabled={ordersLoading}
          >
            Voir toutes les commandes
          </button>
        </div>

        {showOrders && (
          <div>
            <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between", marginBottom: 10 }}>
              <h4 style={{ margin: 0 }}>
                {selectedUserId ? `Commandes du client ${selectedUserId}` : "Toutes les commandes"} ({orders.length})
              </h4>
              <button onClick={() => setShowOrders(false)} style={secondaryBtn}>
                Masquer
              </button>
            </div>

            {ordersLoading ? (
              <p style={{ color: "#64748b" }}>Chargement des commandes‚Ä¶</p>
            ) : orders.length === 0 ? (
              <div style={{
                padding: 24, textAlign: "center", border: "1px solid #e5e7eb",
                borderRadius: 12, background: "#f8fafc"
              }}>
                Aucune commande trouv√©e.
              </div>
            ) : (
              <div style={{ display: "grid", gap: 12 }}>
                {orders.map(order => (
                  <div key={order.id} style={{
                    border: "1px solid #e5e7eb", borderRadius: 8, padding: 12,
                    background: "#f8fafc"
                  }}>
                    <div style={{ display: "flex", justifyContent: "space-between", alignItems: "flex-start", marginBottom: 8 }}>
                      <div>
                        <strong>Commande #{order.id.slice(0, 8)}</strong>
                        <div style={{ fontSize: 14, color: "#64748b" }}>
                          Client: {order.user_id.slice(0, 8)}...
                        </div>
                      </div>
                      <div style={{ textAlign: "right" }}>
                        <div style={{ fontWeight: 700, color: "#2563eb" }}>
                          {fmt.format(order.total_cents / 100)}
                        </div>
                        <div style={{ 
                          fontSize: 12, 
                          padding: "2px 6px", 
                          borderRadius: 4,
                          background: order.status === "PAYEE" ? "#dcfce7" : 
                                     order.status === "EXPEDIEE" ? "#dbeafe" :
                                     order.status === "LIVREE" ? "#f0f9ff" : "#fef3c7",
                          color: order.status === "PAYEE" ? "#166534" :
                                 order.status === "EXPEDIEE" ? "#1e40af" :
                                 order.status === "LIVREE" ? "#0c4a6e" : "#92400e"
                        }}>
                          {order.status}
                        </div>
                      </div>
                    </div>
                    
                    <div style={{ fontSize: 14, color: "#64748b", marginBottom: 8 }}>
                      {order.items.length} article(s) : {order.items.map(item => `${item.name} (x${item.quantity})`).join(", ")}
                    </div>

                    {order.delivery && (
                      <div style={{ fontSize: 14, color: "#64748b", marginBottom: 8 }}>
                        üì¶ Livraison: {order.delivery.transporteur} - {order.delivery.delivery_status}
                        {order.delivery.tracking_number && ` (${order.delivery.tracking_number})`}
                      </div>
                    )}

                    <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
                      <button 
                        onClick={() => navigate(`/admin/orders/${order.id}`)}
                        style={{ ...secondaryBtn, fontSize: 12, padding: "4px 8px" }}
                      >
                        Voir d√©tails
                      </button>
                      {order.status === "PAYEE" && (
                        <button 
                          onClick={async () => {
                            try {
                              await api.adminValidateOrder(order.id);
                              setMsg(`‚úÖ Commande ${order.id.slice(0, 8)} valid√©e`);
                              await loadOrders(selectedUserId || null);
                            } catch (e) {
                              setErr(e.message);
                            }
                          }}
                          style={{ ...primaryBtn, fontSize: 12, padding: "4px 8px" }}
                        >
                          Valider
                        </button>
                      )}
                      {order.status === "VALIDEE" && (
                        <button 
                          onClick={async () => {
                            try {
                              await api.adminShipOrder(order.id);
                              setMsg(`‚úÖ Commande ${order.id.slice(0, 8)} exp√©di√©e`);
                              await loadOrders(selectedUserId || null);
                            } catch (e) {
                              setErr(e.message);
                            }
                          }}
                          style={{ ...primaryBtn, fontSize: 12, padding: "4px 8px" }}
                        >
                          Exp√©dier
                        </button>
                      )}
                      {order.status === "EXPEDIEE" && (
                        <button 
                          onClick={async () => {
                            try {
                              await api.adminMarkDelivered(order.id);
                              setMsg(`‚úÖ Commande ${order.id.slice(0, 8)} marqu√©e livr√©e`);
                              await loadOrders(selectedUserId || null);
                            } catch (e) {
                              setErr(e.message);
                            }
                          }}
                          style={{ ...primaryBtn, fontSize: 12, padding: "4px 8px" }}
                        >
                          Marquer livr√©e
                        </button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </section>
    </div>
  );
}

const fieldStyle = {
  width: "100%",
  padding: "10px 12px",
  borderRadius: 10,
  border: "1px solid #e5e7eb",
  background: "#fff",
  outline: "none",
};

const primaryBtn = {
  background: "#2563eb",
  color: "#fff",
  border: "none",
  borderRadius: 10,
  padding: "10px 14px",
  fontWeight: 700,
  cursor: "pointer",
};

const secondaryBtn = {
  background: "#fff",
  color: "#0f172a",
  border: "1px solid #e5e7eb",
  borderRadius: 10,
  padding: "8px 12px",
  fontWeight: 700,
  cursor: "pointer",
};

const dangerBtn = {
  background: "#ef4444",
  color: "#fff",
  border: "none",
  borderRadius: 10,
  padding: "8px 12px",
  fontWeight: 700,
  cursor: "pointer",
};