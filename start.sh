#!/bin/bash

# Script de d√©marrage unifi√© pour l'e-commerce
# Usage: ./start.sh [backend|frontend|all]

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_message() {
    echo -e "${2}${1}${NC}"
}

# Fonction pour v√©rifier si un port est utilis√©
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0  # Port utilis√©
    else
        return 1  # Port libre
    fi
}

# Fonction pour d√©marrer le backend
start_backend() {
    print_message "üöÄ D√©marrage du backend..." $BLUE
    
    cd ecommerce-backend
    
    # V√©rifier si l'environnement virtuel existe
    if [ ! -d "venv" ]; then
        print_message "üì¶ Cr√©ation de l'environnement virtuel..." $YELLOW
        python3 -m venv venv
    fi
    
    # Activer l'environnement virtuel
    source venv/bin/activate
    
    # Installer syst√©matiquement les d√©pendances (√©vite les modules manquants comme psycopg2)
    print_message "üì• Installation des d√©pendances Python..." $YELLOW
    pip install --upgrade --no-cache-dir -r requirements.txt
    
    # V√©rifier si PostgreSQL est disponible
    if ! pg_isready -h localhost -p 5432 >/dev/null 2>&1; then
        print_message "‚ö†Ô∏è  PostgreSQL n'est pas d√©marr√©. D√©marrage avec Docker..." $YELLOW
        if command -v docker-compose &> /dev/null; then
            docker-compose up -d postgres
            sleep 5
        else
            print_message "‚ùå Docker Compose non disponible. Veuillez d√©marrer PostgreSQL manuellement." $RED
            exit 1
        fi
    fi
    
    # Initialiser la base de donn√©es
    print_message "üóÑÔ∏è  Initialisation de la base de donn√©es..." $YELLOW
    python init_db.py
    
    # V√©rifier si le port 8000 est libre
    if check_port 8000; then
        print_message "‚ö†Ô∏è  Le port 8000 est d√©j√† utilis√©. Arr√™t du processus..." $YELLOW
        lsof -ti:8000 | xargs kill -9 2>/dev/null || true
        sleep 2
    fi
    
    # D√©marrer l'API
    print_message "üåê D√©marrage de l'API sur http://localhost:8000" $GREEN
    print_message "üìö Documentation: http://localhost:8000/docs" $GREEN
    uvicorn api_unified:app --host 0.0.0.0 --port 8000 --reload
}

# Fonction pour d√©marrer le frontend
start_frontend() {
    print_message "üé® D√©marrage du frontend..." $BLUE
    
    cd ecommerce-front
    
    # V√©rifier si node_modules existe
    if [ ! -d "node_modules" ]; then
        print_message "üì¶ Installation des d√©pendances Node.js..." $YELLOW
        npm install
    fi
    
    # V√©rifier si le port 5173 est libre
    if check_port 5173; then
        print_message "‚ö†Ô∏è  Le port 5173 est d√©j√† utilis√©. Arr√™t du processus..." $YELLOW
        lsof -ti:5173 | xargs kill -9 2>/dev/null || true
        sleep 2
    fi
    
    # D√©marrer le serveur de d√©veloppement
    print_message "üåê D√©marrage du frontend sur http://localhost:5173" $GREEN
    npm run dev
}

# Fonction pour d√©marrer les deux
start_all() {
    print_message "üöÄ D√©marrage complet de l'application e-commerce..." $BLUE
    
    # D√©marrer le backend en arri√®re-plan
    start_backend &
    BACKEND_PID=$!
    
    # Attendre que le backend soit pr√™t
    print_message "‚è≥ Attente du d√©marrage du backend..." $YELLOW
    sleep 5
    
    # D√©marrer le frontend
    start_frontend &
    FRONTEND_PID=$!
    
    # Fonction de nettoyage
    cleanup() {
        print_message "üõë Arr√™t des services..." $YELLOW
        kill $BACKEND_PID $FRONTEND_PID 2>/dev/null || true
        exit 0
    }
    
    # Capturer les signaux d'arr√™t
    trap cleanup SIGINT SIGTERM
    
    # Attendre que les processus se terminent
    wait
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [backend|frontend|all]"
    echo ""
    echo "Options:"
    echo "  backend   D√©marrer uniquement le backend (API)"
    echo "  frontend  D√©marrer uniquement le frontend (React)"
    echo "  all       D√©marrer les deux services"
    echo "  help      Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 backend    # D√©marrer l'API sur http://localhost:8000"
    echo "  $0 frontend   # D√©marrer React sur http://localhost:5173"
    echo "  $0 all        # D√©marrer les deux services"
}

# V√©rifier les arguments
case "${1:-all}" in
    backend)
        start_backend
        ;;
    frontend)
        start_frontend
        ;;
    all)
        start_all
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_message "‚ùå Option invalide: $1" $RED
        show_help
        exit 1
        ;;
esac
