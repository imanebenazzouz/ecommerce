#!/usr/bin/env python3
"""
Script de test pour v√©rifier tous les imports
"""

import sys
import os

# Ajouter le r√©pertoire courant au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Teste tous les imports n√©cessaires"""
    print("üîç Test des imports...")
    
    try:
        from sqlalchemy.orm import Session
        print("‚úÖ SQLAlchemy import r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur import SQLAlchemy: {e}")
        return False
    
    try:
        from database.database import get_db, SessionLocal, create_tables
        print("‚úÖ Database imports r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur import database: {e}")
        return False
    
    try:
        from database.models import User, Product, Order, OrderItem, Delivery, Invoice, Payment, MessageThread, Message
        print("‚úÖ Models imports r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur import models: {e}")
        return False
    
    try:
        from database.repositories_simple import (
            PostgreSQLUserRepository, PostgreSQLProductRepository, 
            PostgreSQLCartRepository, PostgreSQLOrderRepository,
            PostgreSQLInvoiceRepository, PostgreSQLPaymentRepository,
            PostgreSQLThreadRepository
        )
        print("‚úÖ Repositories imports r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur import repositories: {e}")
        return False
    
    try:
        from services.auth_service import AuthService
        print("‚úÖ Services imports r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur import services: {e}")
        return False
    
    try:
        from enums import OrderStatus, DeliveryStatus
        print("‚úÖ Enums imports r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur import enums: {e}")
        return False
    
    return True

def test_database_connection():
    """Teste la connexion √† la base de donn√©es"""
    print("\nüîç Test de la connexion √† la base de donn√©es...")
    
    try:
        from database.database import engine, create_tables
        from sqlalchemy import text
        
        # Tester la connexion
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
        
        # Cr√©er les tables si n√©cessaire
        create_tables()
        print("‚úÖ Tables cr√©√©es/v√©rifi√©es")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False

def test_api_creation():
    """Teste la cr√©ation de l'API FastAPI"""
    print("\nüîç Test de la cr√©ation de l'API...")
    
    try:
        from fastapi import FastAPI
        from fastapi.middleware.cors import CORSMiddleware
        
        app = FastAPI(title="Test API")
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        print("‚úÖ API FastAPI cr√©√©e avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation API: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Test complet de l'environnement")
    print("=" * 50)
    
    # Test des imports
    if not test_imports():
        print("\n‚ùå √âchec des tests d'import")
        return
    
    # Test de la base de donn√©es
    if not test_database_connection():
        print("\n‚ùå √âchec des tests de base de donn√©es")
        return
    
    # Test de l'API
    if not test_api_creation():
        print("\n‚ùå √âchec des tests d'API")
        return
    
    print("\n" + "=" * 50)
    print("‚úÖ Tous les tests sont pass√©s avec succ√®s!")
    print("üéâ L'environnement est pr√™t pour l'API")

if __name__ == "__main__":
    main()
