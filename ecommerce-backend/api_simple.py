# api_simple.py
from fastapi import FastAPI, HTTPException, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, Response
from pydantic import BaseModel, EmailStr, Field
from typing import Optional, List
import uuid
import io
import time
from datetime import datetime

# Import des repositories PostgreSQL
from database.database import get_db, SessionLocal, create_tables
from database.repositories_simple import (
    PostgreSQLUserRepository, PostgreSQLProductRepository, 
    PostgreSQLCartRepository, PostgreSQLOrderRepository,
    PostgreSQLInvoiceRepository, PostgreSQLPaymentRepository,
    PostgreSQLThreadRepository
)

# Import des services m√©tier
from services.auth_service import AuthService

# Import des mod√®les
from database.models import User, Product, Order, OrderItem, Delivery, Invoice, Payment, MessageThread, Message
from enums import OrderStatus, DeliveryStatus

app = FastAPI(title="Ecommerce API (TP)")

# -------------------------------- CORS --------------------------------
import os

# Configuration CORS s√©curis√©e
ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Vite dev server
    "http://localhost:5174",  # Vite dev server (port alternatif)
    "http://localhost:3000",  # React dev server alternatif
    "http://127.0.0.1:5173",
    "http://127.0.0.1:5174",
    "http://127.0.0.1:3000",
]

# Ajouter les origines de production si d√©finies
if os.getenv("PRODUCTION_ORIGINS"):
    ALLOWED_ORIGINS.extend(os.getenv("PRODUCTION_ORIGINS").split(","))

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# -------------------------------- MOD√àLES PYDANTIC --------------------------------

class UserCreate(BaseModel):
    email: EmailStr
    password: str = Field(..., min_length=6)
    first_name: str = Field(..., min_length=1)
    last_name: str = Field(..., min_length=1)
    address: str = Field(..., min_length=1)

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class UserResponse(BaseModel):
    id: str
    email: str
    first_name: str
    last_name: str
    is_admin: bool
    created_at: datetime

class TokenResponse(BaseModel):
    access_token: str
    token_type: str
    user: UserResponse

# -------------------------------- ENDPOINTS --------------------------------

@app.get("/")
async def root():
    """Point d'entr√©e de l'API"""
    return {
        "message": "API E-commerce",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health"
    }

@app.get("/health")
async def health_check():
    """V√©rification de l'√©tat de l'API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "database": "connected"
    }

# -------------------------------- AUTHENTIFICATION --------------------------------

@app.post("/auth/register", response_model=TokenResponse)
async def register(user_data: UserCreate, db = Depends(get_db)):
    """Inscription d'un nouvel utilisateur"""
    try:
        # Cr√©er les repositories
        user_repo = PostgreSQLUserRepository(db)
        
        # Cr√©er le service d'authentification
        auth_service = AuthService(user_repo)
        
        # V√©rifier si l'utilisateur existe d√©j√†
        existing_user = user_repo.get_by_email(user_data.email)
        if existing_user:
            raise HTTPException(status_code=400, detail="Email d√©j√† utilis√©")
        
        # Cr√©er l'utilisateur
        user = auth_service.register_user(
            email=user_data.email,
            password=user_data.password,
            first_name=user_data.first_name,
            last_name=user_data.last_name,
            address=user_data.address
        )
        
        # Cr√©er le token d'acc√®s
        access_token = auth_service.create_access_token({"sub": user.id})
        
        return TokenResponse(
            access_token=access_token,
            token_type="bearer",
            user=UserResponse(
                id=user.id,
                email=user.email,
                first_name=user.first_name,
                last_name=user.last_name,
                is_admin=user.is_admin,
                created_at=user.created_at
            )
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de l'inscription: {str(e)}")

@app.post("/auth/login", response_model=TokenResponse)
async def login(user_data: UserLogin, db = Depends(get_db)):
    """Connexion d'un utilisateur"""
    try:
        # Cr√©er les repositories
        user_repo = PostgreSQLUserRepository(db)
        
        # Cr√©er le service d'authentification
        auth_service = AuthService(user_repo)
        
        # Authentifier l'utilisateur
        user = auth_service.authenticate_user(user_data.email, user_data.password)
        if not user:
            raise HTTPException(status_code=401, detail="Email ou mot de passe incorrect")
        
        # Cr√©er le token d'acc√®s
        access_token = auth_service.create_access_token({"sub": user.id})
        
        return TokenResponse(
            access_token=access_token,
            token_type="bearer",
            user=UserResponse(
                id=user.id,
                email=user.email,
                first_name=user.first_name,
                last_name=user.last_name,
                is_admin=user.is_admin,
                created_at=user.created_at
            )
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la connexion: {str(e)}")

# -------------------------------- UTILITAIRES --------------------------------

def get_current_user(authorization: str = Header(None), db = Depends(get_db)):
    """R√©cup√®re l'utilisateur actuel √† partir du token JWT"""
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Token d'authentification manquant")
    
    token = authorization.split(" ")[1]
    
    try:
        # Cr√©er les repositories
        user_repo = PostgreSQLUserRepository(db)
        
        # Cr√©er le service d'authentification
        auth_service = AuthService(user_repo)
        
        # D√©coder le token
        user_id = auth_service.decode_token(token)
        user = user_repo.get_by_id(user_id)
        
        if not user:
            raise HTTPException(status_code=401, detail="Utilisateur non trouv√©")
        
        return user
        
    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Token invalide: {str(e)}")

@app.get("/auth/me", response_model=UserResponse)
async def get_current_user_info(current_user: User = Depends(get_current_user)):
    """R√©cup√®re les informations de l'utilisateur actuel"""
    return UserResponse(
        id=current_user.id,
        email=current_user.email,
        first_name=current_user.first_name,
        last_name=current_user.last_name,
        is_admin=current_user.is_admin,
        created_at=current_user.created_at
    )

# -------------------------------- INITIALISATION --------------------------------

@app.on_event("startup")
async def startup_event():
    """√âv√©nement de d√©marrage de l'application"""
    print("üöÄ D√©marrage de l'API E-commerce...")
    
    # Cr√©er les tables de base de donn√©es
    create_tables()
    print("‚úÖ Tables de base de donn√©es cr√©√©es")
    
    print("üéâ API pr√™te √† recevoir des requ√™tes!")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
