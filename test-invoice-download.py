#!/usr/bin/env python3
"""
Script de test pour v√©rifier le t√©l√©chargement de facture PDF
"""

import requests
import json
import time
import sys
import os

# Configuration
API_BASE = "http://127.0.0.1:8000"
FRONTEND_BASE = "http://127.0.0.1:5173"

def test_invoice_download():
    """Test complet du t√©l√©chargement de facture PDF"""
    
    print("üßæ Test du t√©l√©chargement de facture PDF")
    print("=" * 50)
    
    # 1. Connexion admin
    print("\n1Ô∏è‚É£ Connexion admin...")
    login_data = {
        "email": "admin@example.com",
        "password": "admin"
    }
    
    response = requests.post(f"{API_BASE}/auth/login", json=login_data)
    if response.status_code != 200:
        print(f"‚ùå Erreur connexion admin: {response.status_code}")
        return False
    
    admin_token = response.json()["token"]
    admin_headers = {"Authorization": f"Bearer {admin_token}"}
    print("‚úÖ Admin connect√©")
    
    # 2. Connexion client
    print("\n2Ô∏è‚É£ Connexion client...")
    client_login = {
        "email": "client@example.com", 
        "password": "secret"
    }
    
    response = requests.post(f"{API_BASE}/auth/login", json=client_login)
    if response.status_code != 200:
        print(f"‚ùå Erreur connexion client: {response.status_code}")
        return False
    
    client_token = response.json()["token"]
    client_headers = {"Authorization": f"Bearer {client_token}"}
    print("‚úÖ Client connect√©")
    
    # 3. R√©cup√©rer les commandes du client
    print("\n3Ô∏è‚É£ R√©cup√©ration des commandes...")
    response = requests.get(f"{API_BASE}/orders", headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur r√©cup√©ration commandes: {response.status_code}")
        return False
    
    orders = response.json()
    if not orders:
        print("‚ö†Ô∏è Aucune commande trouv√©e pour le client")
        return False
    
    # Prendre la premi√®re commande pay√©e
    paid_order = None
    for order in orders:
        if order["status"] == "PAYEE":
            paid_order = order
            break
    
    if not paid_order:
        print("‚ö†Ô∏è Aucune commande pay√©e trouv√©e")
        return False
    
    print(f"‚úÖ Commande trouv√©e: {paid_order['id'][:8]}")
    
    # 4. V√©rifier que la facture existe
    print("\n4Ô∏è‚É£ V√©rification de la facture...")
    response = requests.get(f"{API_BASE}/orders/{paid_order['id']}/invoice", headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Facture non trouv√©e: {response.status_code}")
        return False
    
    invoice_data = response.json()
    print("‚úÖ Facture trouv√©e")
    print(f"   - ID: {invoice_data['id'][:8]}")
    print(f"   - Nombre d'articles: {len(invoice_data['lines'])}")
    print(f"   - Total: {invoice_data['total_cents'] / 100:.2f} ‚Ç¨")
    
    # 5. V√©rifier le contenu de la facture
    print("\n5Ô∏è‚É£ Validation du contenu de la facture...")
    
    # V√©rifier chaque ligne
    total_calculated = 0
    for line in invoice_data['lines']:
        expected_total = line['unit_price_cents'] * line['quantity']
        if line.get('line_total_cents', 0) != expected_total:
            print(f"‚ùå Erreur calcul ligne {line['product_id']}: {line.get('line_total_cents', 0)} ‚â† {expected_total}")
            return False
        total_calculated += expected_total
        print(f"   ‚úÖ {line['name']}: {line['quantity']} √ó {line['unit_price_cents']/100:.2f}‚Ç¨ = {expected_total/100:.2f}‚Ç¨")
    
    if total_calculated != invoice_data['total_cents']:
        print(f"‚ùå Total incoh√©rent: {total_calculated/100:.2f}‚Ç¨ ‚â† {invoice_data['total_cents']/100:.2f}‚Ç¨")
        return False
    
    print(f"‚úÖ Total coh√©rent: {total_calculated/100:.2f}‚Ç¨")
    
    # 6. T√©l√©charger le PDF
    print("\n6Ô∏è‚É£ T√©l√©chargement du PDF...")
    response = requests.get(f"{API_BASE}/orders/{paid_order['id']}/invoice/download", headers=client_headers)
    if response.status_code != 200:
        print(f"‚ùå Erreur t√©l√©chargement PDF: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        return False
    
    # V√©rifier le type de contenu
    content_type = response.headers.get('content-type')
    if content_type != 'application/pdf':
        print(f"‚ùå Type de contenu incorrect: {content_type}")
        return False
    
    # Sauvegarder le PDF
    filename = f"test_facture_{paid_order['id'][:8]}.pdf"
    with open(filename, 'wb') as f:
        f.write(response.content)
    
    file_size = len(response.content)
    print(f"‚úÖ PDF t√©l√©charg√©: {filename} ({file_size} bytes)")
    
    # 7. V√©rifier les donn√©es de paiement
    print("\n7Ô∏è‚É£ V√©rification des donn√©es de paiement...")
    
    # R√©cup√©rer les paiements pour cette commande
    # Note: Dans l'impl√©mentation actuelle, on ne peut pas facilement r√©cup√©rer les paiements
    # mais on peut v√©rifier que la commande est bien pay√©e
    if paid_order['status'] != 'PAYEE':
        print(f"‚ùå Commande non pay√©e: {paid_order['status']}")
        return False
    
    print("‚úÖ Commande correctement pay√©e")
    
    # 8. V√©rifier les donn√©es de livraison
    print("\n8Ô∏è‚É£ V√©rification des donn√©es de livraison...")
    if paid_order.get('delivery'):
        delivery = paid_order['delivery']
        print(f"   ‚úÖ Transporteur: {delivery['transporteur']}")
        print(f"   ‚úÖ Statut: {delivery['delivery_status']}")
        if delivery.get('tracking_number'):
            print(f"   ‚úÖ Num√©ro de suivi: {delivery['tracking_number']}")
    else:
        print("‚ö†Ô∏è Aucune information de livraison")
    
    # 9. Validation finale
    print("\n9Ô∏è‚É£ Validation finale...")
    
    # V√©rifier que le PDF s'ouvre correctement (v√©rification basique)
    if file_size < 1000:  # PDF trop petit
        print(f"‚ùå PDF suspect (trop petit: {file_size} bytes)")
        return False
    
    print("‚úÖ PDF semble valide")
    
    # Nettoyer le fichier de test
    os.remove(filename)
    print(f"‚úÖ Fichier de test supprim√©: {filename}")
    
    print("\nüéâ TEST R√âUSSI !")
    print("=" * 50)
    print("‚úÖ T√©l√©chargement de facture PDF fonctionnel")
    print("‚úÖ Contenu de la facture correct")
    print("‚úÖ Donn√©es de paiement coh√©rentes")
    print("‚úÖ Donn√©es de livraison pr√©sentes")
    print("‚úÖ Coh√©rence entre toutes les donn√©es")
    
    return True

if __name__ == "__main__":
    try:
        success = test_invoice_download()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)
